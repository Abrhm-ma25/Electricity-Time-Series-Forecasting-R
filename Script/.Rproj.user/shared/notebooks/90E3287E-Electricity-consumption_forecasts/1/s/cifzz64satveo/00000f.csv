"0","# Build lagged dataset with y (consumption) and Temp"
"0",""
"0","data_xgb <- tk_augment_lags("
"0","  tibble("
"0","    y    = as.numeric(cons_ts),"
"0","    Temp = as.numeric(temp_ts)"
"0","  ),"
"0","  .value = y, .lags = 1:24"
"0",")"
"0",""
"0","# Drop NA (due to lags)"
"0",""
"0","data_xgb <- na.omit(data_xgb)"
"0",""
"0","# Train/Test split"
"0",""
"0","n <- nrow(data_xgb)"
"0","train_x <- data_xgb[1:(n-96), -1]  # all predictors"
"0","train_y <- data_xgb$y[1:(n-96)]"
"0","test_x  <- data_xgb[(n-95):n, -1]"
"0","test_y  <- data_xgb$y[(n-95):n]"
"0",""
"0","# Train XGBoost"
"0",""
"0","dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)"
"0","dtest  <- xgb.DMatrix(data = as.matrix(test_x), label = test_y)"
"0",""
"0","params <- list("
"0","  objective = ""reg:squarederror"","
"0","  eval_metric = ""rmse"""
"0",")"
"0",""
"0","xgb_fit <- xgb.train("
"0","  params = params,"
"0","  data = dtrain,"
"0","  nrounds = 200,"
"0","  watchlist = list(train = dtrain, test = dtest),"
"0","  verbose = 0"
"0",")"
"0",""
"0","# Forecast next 96 steps using temp_future"
"0","# Create future lagged features (last observed values + temp_future)"
"0",""
"0","last_vals <- tail(data_xgb, 24) #last 24 lags"
"0","y_preds   <- numeric(96)            #to store predictions"
"0","lags      <- last_vals$y            #start with last observed y"
"0",""
"0",""
"0","# Generate rolling lags recursively"
"0","y_preds <- numeric(96)"
"0","lags <- last_vals$y"
"0",""
"0","for (i in 1:96) {"
"0","  "
"0","# Build input row: 24 lags + future temp"
"0","  new_obs <- c(tail(lags, 24), temp_future[i])"
"0","  x_new   <- matrix(new_obs, nrow = 1)"
"0","  "
"0","# Predict next value"
"0","  y_new      <- predict(xgb_fit, x_new)"
"0","  y_preds[i] <- y_new"
"0","  "
"0","# Update lags"
"0","  lags <- c(lags, y_new)"
"0","}"
